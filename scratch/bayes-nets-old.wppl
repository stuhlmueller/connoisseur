

var getPiecewiseLinear = function(){
  var getA = function(){return sample(Gaussian({mu:0, sigma:2}));}
  var aValues = {
    less0 : getA(),
    less1 : getA(),
    greater1 : getA()
  }
  var f = function(x){
    var a = (x<0) ? aValues.less0 :
        ( (x<1) ? aValues.less1 : aValues.greater1 );
    
    return Gaussian({mu:a*x, sigma:.001}); 
  };
};

var priorU = function(fixParams){
  var getCoefficient = function(){return sample(Gaussian({mu:0, sigma:2}));}
  
  var degree = 4;
  
  var params = fixParams ? fixParams : 
      {coefficients: repeat(degree+1, getCoefficient)};
  
  var u = function(x){
    var value =  sum( map(function(i){
      return params.coefficients[i] * Math.pow(x,i)
    }, _.range(degree+1)));
    return Gaussian({mu:value, sigma:.001});
  };
    
  return {
    u: u,
    params:params
  };
};

var modelMSE = function(){
  var squaredError = function(x,y){return (x-y)*(x-y);};
  
  var errorOnData = function(params, data) {
    return map(function(datum){
      var predictedDatum = getDatumGivenContext(datum.x, params);    
      var uError = squaredError(predictedDatum.u, datum.u);
      var bError = squaredError(predictedDatum.b, datum.b);
      return {u: uError, 
            b:bError, 
            sum: uError + bError};
    }, data);
  };
  
  var params = priorParams();
 
  var trainError = sum(_.map(errorOnData(params, trainingData), 'sum'));
  factor(-trainError);

  var N = testData.length;
  var testError = (1/N)*sum(_.map(errorOnData(params, testData), 'u'))
 
  return {uParams: params.uParams, 
          bParams: params.bParams,
          testError: testError};
};

var inferModelMSE = function(){
  var erp = Infer({method:'MCMC', samples:10000, verbose:false}, model);
  print('true params: ' + JSON.stringify(params) );
  print('\n\n MAP for model' + JSON.stringify(erp.MAP().val) );
  viz.auto(parameterU)
};
